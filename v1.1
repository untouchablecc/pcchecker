import os
import subprocess
import requests
import json
import time
import platform
import getpass
import tempfile
import psutil
from datetime import datetime

# Webhook URLs
WEBHOOK_URLS = {
    'system_processes': 'https://canary.discord.com/api/webhooks/1279137428371931248/eYRZf4HRZ5GmYXgLI_iRA5WiOhqVSFBDGn_ztg-oRrNrSWmdKq69WC0MX9P9nQuutQac',
    'admin_processes': 'https://canary.discord.com/api/webhooks/1279137428371931248/eYRZf4HRZ5GmYXgLI_iRA5WiOhqVSFBDGn_ztg-oRrNrSWmdKq69WC0MX9P9nQuutQac',
    'process_traces': 'https://canary.discord.com/api/webhooks/1279148419193114694/l4pr5CEMMlD4LDsZ9_plYFSfTgWCVvWqXCN9Gri6XVq8bRL55GZtgNZXGOU1TrY34SCV',
    'database': 'https://canary.discord.com/api/webhooks/1279407337618145310/A7fONuJnsWJLLCwkB2XlNKga0XeQwO6yq3HjWzhHt6hqzafunlxxeIO_dpebSN_DcunP',
    'recent_activity': 'https://canary.discord.com/api/webhooks/1279411390314057820/85pPrwRUCeX3EoLCexlHK0LOyAf9m9pRmRO3GIgZZMhMdm_gxAbMLWSE_0T6MXNhiWgK',
    'error': 'https://canary.discord.com/api/webhooks/1279188293438799902/S3ejH4YpQBv-7Yp4TfW8LCezK-UpzVxolIwdcX66uN-DQZ2DiXt-X2QdeL2mM9ky5Siz'
}

def send_embed_to_webhook(title, description, color, url):
    """Send a message to the webhook with an embedded format."""
    max_description_length = 2000
    descriptions = [description[i:i+max_description_length] for i in range(0, len(description), max_description_length)]

    for desc in descriptions:
        embed = {
            "embeds": [
                {
                    "title": title,
                    "description": desc,
                    "color": color
            ]
        }
        try:
            response = requests.post(url, json=embed)
            response.raise_for_status()
        except requests.exceptions.RequestException as e:
            print(f"Failed to send webhook: {e}")

def scan_all_files(base_path, trace_keywords):
    """Scan all files in the given directory and its subdirectories for traces of specific keywords."""
    result = []
    for root, dirs, files in os.walk(base_path):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                with open(file_path, 'r', errors='ignore') as f:
                    content = f.read()
                    if any(keyword.lower() in content.lower() for keyword in trace_keywords):
                        result.append(file_path)
            except Exception as e:
                print(f"Failed to read file {file_path}: {e}")
    return result

def get_processes():
    """Retrieve system processes."""
    return [p.info for p in psutil.process_iter(attrs=['pid', 'name', 'username'])]

def get_admin_processes():
    """Retrieve admin processes (requires admin privileges)."""
    return [p.info for p in psutil.process_iter(attrs=['pid', 'name', 'username']) if 'admin' in p.info['username'].lower()]

def get_system_info():
    """Retrieve system information."""
    uname = platform.uname()
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    system_info = {
        "System": uname.system,
        "Node Name": uname.node,
        "Release": uname.release,
        "Version": uname.version,
        "Machine": uname.machine,
        "Processor": uname.processor,
        "Boot Time": boot_time.strftime('%Y-%m-%d %H:%M:%S'),
        "User": getpass.getuser(),
        "IP Address": get_ip_address()  # Add more info if needed
    }
    return system_info

def get_ip_address():
    """Get the IP address of the system."""
    try:
        import socket
        hostname = socket.gethostname()
        ip_address = socket.gethostbyname(hostname)
        return ip_address
    except Exception as e:
        return f"Could not retrieve IP address: {e}"

def handle_recent_activity(activity_type):
    """Handle recent activity based on user choice."""
    activities = {
        'deleted': 'Searching for deleted files...',
        'recent': 'Searching for recent files...',
        'renamed': 'Searching for renamed files...'
    }
    # Placeholder for real implementation
    return activities.get(activity_type, 'Unknown activity type')

def main():
    """Main function to run the tool."""
    print("Choose your option:")
    print("1. Scan all processes and admin processes.")
    print("2. Database search.")
    print("3. PC scan.")
    print("4. System information.")
    print("5. Recent activity.")
    print("6. Error handling.")

    choice = input("Enter your choice (1-6): ")
    webhook_delay = int(input("Enter webhook delay in seconds: "))
    
    # Delay between webhooks
    def delayed_send(url, title, description, color):
        time.sleep(webhook_delay)
        send_embed_to_webhook(title, description, color, url)
    
    if choice == '1':
        processes = get_processes()
        delayed_send(WEBHOOK_URLS['system_processes'], "System Processes", json.dumps(processes, indent=2), 0x00ff00)
        admin_processes = get_admin_processes()
        delayed_send(WEBHOOK_URLS['admin_processes'], "Admin Processes", json.dumps(admin_processes, indent=2), 0x00ff00)
    
    elif choice == '2':
        print("Starting database search...")
        # Database search code here (add detailed implementation)
        delayed_send(WEBHOOK_URLS['database'], "Database Search", "Detailed database search results go here.", 0x0000ff)
    
    elif choice == '3':
        print("Starting PC scan...")
        scan_paths = [
            'C:\\',
            'C:\\Users\\' + getpass.getuser() + '\\AppData',
            'C:\\Program Files',
            'C:\\Program Files (x86)'
        ]
        trace_keywords = ['steam', 'spotify', 'razercortex', 'razer synapse 3', 'lghub', 'chrome', 'tiktok', 'voicemeeterpro', 'brave']
        all_results = []
        for path in scan_paths:
            print(f"Scanning {path}...")
            results = scan_all_files(path, trace_keywords)
            all_results.extend(results)
        delayed_send(WEBHOOK_URLS['process_traces'], "PC Scan Results", '\n'.join(all_results), 0xff0000)
    
    elif choice == '4':
        system_info = get_system_info()
        delayed_send(WEBHOOK_URLS['recent_activity'], "System Information", json.dumps(system_info, indent=2), 0x00ff00)
    
    elif choice == '5':
        print("Choose activity type (deleted, recent, renamed):")
        activity_type = input()
        result = handle_recent_activity(activity_type)
        delayed_send(WEBHOOK_URLS['recent_activity'], "Recent Activity", result, 0x00ff00)
    
    elif choice == '6':
        print("Handling errors...")
        # Error handling code here
    
    else:
        print("Invalid choice")

if __name__ == '__main__':
    main()
