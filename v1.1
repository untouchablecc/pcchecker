import sys
import requests
import psutil
import platform
import json
from datetime import datetime
import os

# Define webhooks
WEBHOOK_URLS = {
    'database': 'https://canary.discord.com/api/webhooks/1279407337618145310/A7fONuJnsWJLLCwkB2XlNKga0XeQwO6yq3HjWzhHt6hqzafunlxxeIO_dpebSN_DcunP',
    'traces': 'https://canary.discord.com/api/webhooks/1279148419193114694/l4pr5CEMMlD4LDsZ9_plYFSfTgWCVvWqXCN9Gri6XVq8bRL55GZtgNZXGOU1TrY34SCV',
    'admin_processes': 'https://canary.discord.com/api/webhooks/1279137428371931248/eYRZf4HRZ5GmYXgLI_iRA5WiOhqVSFBDGn_ztg-oRrNrSWmdKq69WC0MX9P9nQuutQac',
    'recent_activity': 'https://canary.discord.com/api/webhooks/1279411390314057820/85pPrwRUCeX3EoLCexlHK0LOyAf9m9pRmRO3GIgZZMhMdm_gxAbMLWSE_0T6MXNhiWgK',
    'system_info': 'https://canary.discord.com/api/webhooks/1279407392379109497/15w0yvCeqmb64b7NqPgtFL8ZRwmqjMb3G1H0Mu0NX4nBXnwqoWTLGogQOSBVS6_2CoC_'
}

def send_webhook(url, message):
    try:
        response = requests.post(url, json={"content": message})
        response.raise_for_status()
    except requests.RequestException as e:
        print(f"Failed to send webhook: {e}")

def get_recent_activity(activity_type):
    message = f"Recent activity ({activity_type}):\n"
    # Implement detailed scanning based on activity_type (e.g., deleted, recent, renamed)
    message += "Detailed activity information goes here."
    return message

def get_system_info():
    info = {
        'OS': platform.system(),
        'OS Version': platform.version(),
        'Architecture': platform.architecture()[0],
        'CPU': platform.processor(),
        'RAM': f"{round(psutil.virtual_memory().total / (1024 ** 3))} GB",
        'Boot Time': datetime.fromtimestamp(psutil.boot_time()).strftime("%Y-%m-%d %H:%M:%S")
    }
    message = json.dumps(info, indent=4)
    return message

def scan_processes():
    processes = []
    for proc in psutil.process_iter(['pid', 'name', 'username']):
        processes.append(f"{proc.info['name']} (PID: {proc.info['pid']}, User: {proc.info['username']})")
    return "\n".join(processes)

def scan_admin_processes():
    admin_processes = [proc.info for proc in psutil.process_iter(['pid', 'name', 'username']) if proc.info['username'] == 'SYSTEM']
    message = "\n".join([f"{proc['name']} (PID: {proc['pid']})" for proc in admin_processes])
    return message

def scan_database():
    # Implement detailed database scanning here (e.g., browser history, cache, etc.)
    message = "Database scan results:\n"
    # Add detailed scan results here.
    return message

def scan_files(file_choice):
    file_paths = {
        'steam': 'C:\\Program Files (x86)\\Steam',
        'spotify': 'C:\\Program Files\\Spotify',
        'razer_cortex': 'C:\\Program Files (x86)\\Razer\\Razer Cortex',
        'razer_synapse': 'C:\\Program Files (x86)\\Razer\\Synapse',
        'lghub': 'C:\\Program Files\\LGHUB',
        'chrome': 'C:\\Program Files\\Google\\Chrome\\Application',
        'tiktok_live_studio': 'C:\\Program Files\\TikTok LIVE Studio',
        'voicemeeterpro': 'C:\\Program Files (x86)\\VB\\VoicemeeterPro',
        'brave': 'C:\\Program Files\\BraveSoftware\\Brave-Browser'
    }

    if file_choice.lower() == 'all':
        files_to_scan = file_paths.items()
    else:
        files_to_scan = [(name, path) for name, path in file_paths.items() if name == file_choice.lower()]

    message = "Scanning for the following files:\n"
    for name, path in files_to_scan:
        if os.path.exists(path):
            message += f"- {name.capitalize()} found at {path}\n"
        else:
            message += f"- {name.capitalize()} not found at {path}\n"

    return message

def main():
    if len(sys.argv) != 3:
        print("Usage: python script.py <option> <delay>")
        sys.exit(1)
    
    option = sys.argv[1]
    delay = int(sys.argv[2])
    
    if option == '1':
        send_webhook(WEBHOOK_URLS['admin_processes'], scan_processes())
        send_webhook(WEBHOOK_URLS['traces'], scan_admin_processes())
    elif option == '2':
        send_webhook(WEBHOOK_URLS['database'], scan_database())
    elif option == '3':
        print("Available options: steam, spotify, razer_cortex, razer_synapse, lghub, chrome, tiktok_live_studio, voicemeeterpro, brave, All")
        file_choice = input("Enter the file to scan or 'All': ")
        message = scan_files(file_choice)
        send_webhook(WEBHOOK_URLS['traces'], message)
    elif option == '4':
        message = get_system_info()
        send_webhook(WEBHOOK_URLS['system_info'], message)
    elif option == '5':
        print("Options: deleted, recent, renamed")
        activity_choice = input("Enter the activity type: ")
        message = get_recent_activity(activity_choice)
        send_webhook(WEBHOOK_URLS['recent_activity'], message)
    else:
        print("Invalid option.")
        sys.exit(1)

if __name__ == "__main__":
    main()
