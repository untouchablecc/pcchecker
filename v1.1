import sys
import requests
import json
import platform
import getpass
import psutil
from datetime import datetime

# Webhook URLs
WEBHOOK_URLS = {
    'system_info': 'https://your-webhook-url-for-system-info',
    'database_cache': 'https://your-webhook-url-for-database-cache',
    'active_processes': 'https://your-webhook-url-for-active-processes',
    'recent_activities': 'https://your-webhook-url-for-recent-activities'
}

def send_to_webhook(title, description, url):
    """Send data to a webhook with an embedded format."""
    embed = {
        "embeds": [
            {
                "title": title,
                "description": description,
                "color": 0x00FF00  # Green color
            }
        ]
    }
    try:
        response = requests.post(url, json=embed)
        response.raise_for_status()
        print(f"Embed sent to webhook: {title}")
    except requests.RequestException as e:
        print(f"Failed to send embed to webhook: {e}")

def system_info():
    uname = platform.uname()
    boot_time = datetime.fromtimestamp(psutil.boot_time())
    current_time = datetime.now()
    info = {
        'System': uname.system,
        'Node Name': uname.node,
        'Release': uname.release,
        'Version': uname.version,
        'Machine': uname.machine,
        'Processor': uname.processor,
        'Boot Time': boot_time.strftime('%Y-%m-%d %H:%M:%S'),
        'Current Time': current_time.strftime('%Y-%m-%d %H:%M:%S'),
        'User': getpass.getuser(),
        'CPU Usage': f"{psutil.cpu_percent()}%",
        'Memory Info': f"Total: {psutil.virtual_memory().total / (1024 ** 3):.2f} GB, Available: {psutil.virtual_memory().available / (1024 ** 3):.2f} GB",
        'Disk Usage': f"Total: {psutil.disk_usage('/').total / (1024 ** 3):.2f} GB, Used: {psutil.disk_usage('/').used / (1024 ** 3):.2f} GB"
    }
    return info

def main():
    if len(sys.argv) < 2:
        print("Usage: script.py [options]")
        sys.exit(1)

    option = sys.argv[1]

    if option == '--scan':
        # Implement PC Deep Scan logic here
        print("Performing PC Deep Scan...")
        # Example: results = perform_deep_scan()
        results = "Deep scan results here"
        send_to_webhook("PC Deep Scan Results", results, WEBHOOK_URLS['system_info'])
    elif option == '--system-info':
        info = system_info()
        info_str = json.dumps(info, indent=2)
        send_to_webhook("System Information", info_str, WEBHOOK_URLS['system_info'])
    elif option == '--database-cache':
        # Implement Database Cache logic here
        print("Retrieving Database Cache...")
        # Example: cache_info = get_database_cache()
        cache_info = "Database cache results here"
        send_to_webhook("Database Cache Results", cache_info, WEBHOOK_URLS['database_cache'])
    elif option == '--active-processes':
        # Implement Active Processes logic here
        print("Retrieving Active Processes...")
        # Example: processes_info = get_active_processes()
        processes_info = "Active processes results here"
        send_to_webhook("Active Processes Results", processes_info, WEBHOOK_URLS['active_processes'])
    elif option == '--recent-activities':
        activity_type = sys.argv[2] if len(sys.argv) > 2 else ''
        if activity_type == 'deleted':
            print("Finding deleted files...")
            # Example: deleted_files = find_recently_deleted_files()
            deleted_files = "Deleted files results here"
            send_to_webhook("Deleted Files", deleted_files, WEBHOOK_URLS['recent_activities'])
        elif activity_type == 'renamed':
            print("Finding renamed files...")
            # Example: renamed_files = find_renamed_files()
            renamed_files = "Renamed files results here"
            send_to_webhook("Renamed Files", renamed_files, WEBHOOK_URLS['recent_activities'])
        elif activity_type == 'closed':
            print("Finding closed/opened files...")
            # Example: closed_files = find_closed_files()
            closed_files = "Closed/opened files results here"
            send_to_webhook("Closed/Open Files", closed_files, WEBHOOK_URLS['recent_activities'])
        else:
            print("Invalid activity type.")
            sys.exit(1)
    else:
        print("Invalid option")
        sys.exit(1)

if __name__ == "__main__":
    main()
